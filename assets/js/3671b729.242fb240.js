"use strict";(self.webpackChunkcode_craft=self.webpackChunkcode_craft||[]).push([[6554],{1877:(e,a,n)=>{n.r(a),n.d(a,{assets:()=>c,contentTitle:()=>d,default:()=>p,frontMatter:()=>i,metadata:()=>s,toc:()=>t});const s=JSON.parse('{"id":"kafka/semana-1","title":"Semana 1 - Fundamentos e Kafka","description":"Compreender conceitos de mensageria, brokers, t\xf3picos, filas e consumidores,  Conhecer Apache Kafka: arquitetura, vantagens, casos de uso. Instalar Kafka localmente usando Docker, Produzir e consumir mensagens usando CLI.","source":"@site/docs/kafka/semana-1.md","sourceDirName":"kafka","slug":"/kafka/semana-1","permalink":"/code-craft/docs/kafka/semana-1","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/kafka/semana-1.md","tags":[],"version":"current","frontMatter":{"id":"semana-1","title":"Semana 1 - Fundamentos e Kafka"},"sidebar":"tutorialSidebar","previous":{"title":"Tutorial - kafka","permalink":"/code-craft/docs/category/tutorial---kafka"},"next":{"title":"Semana 2 - Kafka Producer com C#","permalink":"/code-craft/docs/kafka/semana-2"}}');var o=n(4848),r=n(8453);const i={id:"semana-1",title:"Semana 1 - Fundamentos e Kafka"},d="Semana 1 - Fundamentos de Mensageria e Kafka",c={},t=[{value:"\ud83c\udfdb\ufe0f  1. Fundamentos de Mensageria e Arquitetura do Apache Kafka",id:"\ufe0f--1-fundamentos-de-mensageria-e-arquitetura-do-apache-kafka",level:3},{value:"\ud83d\udca1 2. Vantagens do Kafka",id:"-2-vantagens-do-kafka",level:3},{value:"2.1. capabilities",id:"21-capabilities",level:4},{value:"2.2 Casos de uso comuns:",id:"22-casos-de-uso-comuns",level:4},{value:"\ud83d\udc33 3. Instala\xe7\xe3o Kafka usando Docker",id:"-3-instala\xe7\xe3o-kafka-usando-docker",level:3},{value:"\ud83d\udee0\ufe0f 4. Produzir e consumir mensagens via CLI",id:"\ufe0f-4-produzir-e-consumir-mensagens-via-cli",level:3}];function l(e){const a={code:"code",h1:"h1",h3:"h3",h4:"h4",header:"header",li:"li",p:"p",pre:"pre",ul:"ul",...(0,r.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(a.header,{children:(0,o.jsx)(a.h1,{id:"semana-1---fundamentos-de-mensageria-e-kafka",children:"Semana 1 - Fundamentos de Mensageria e Kafka"})}),"\n",(0,o.jsx)(a.p,{children:"Compreender conceitos de mensageria, brokers, t\xf3picos, filas e consumidores,  Conhecer Apache Kafka: arquitetura, vantagens, casos de uso. Instalar Kafka localmente usando Docker, Produzir e consumir mensagens usando CLI."}),"\n",(0,o.jsx)(a.h3,{id:"\ufe0f--1-fundamentos-de-mensageria-e-arquitetura-do-apache-kafka",children:"\ud83c\udfdb\ufe0f  1. Fundamentos de Mensageria e Arquitetura do Apache Kafka"}),"\n",(0,o.jsx)(a.p,{children:"1.1 O que \xe9 Mensageria?\n\xc9 um padr\xe3o de comunica\xe7\xe3o ass\xedncrona entre sistemas. Ao inv\xe9s de uma aplica\xe7\xe3o chamar diretamente outra, ela envia mensagens para uma Broker que intermedia a comunica\xe7\xe3o."}),"\n",(0,o.jsx)(a.p,{children:"1.2 Conceitos principais:"}),"\n",(0,o.jsx)(a.p,{children:"1.2.2- T\xf3pico: canal onde as mensagens s\xe3o publicadas e de onde os consumidores leem. Kafka usa t\xf3picos, n\xe3o filas. Cada t\xf3pico pode ter v\xe1rias parti\xe7\xf5es, permitindo escalabilidade e paralelismo."}),"\n",(0,o.jsx)(a.p,{children:'1.2.3- Fila: conceito cl\xe1ssico onde uma mensagem \xe9 consumida por apenas um consumidor. No Kafka, isso \xe9 obtido atrav\xe9s de particionamento e grupos de consumidores. Dessa maneira o conceito de fila, "by the book" n\xe3o se aplica ao kafka ao inv\xe9s da fila ele usa T\xf3picos permitindo assim que n\xe3o apenas 1 \xfanico consumidor leia a fila mas um grupo de consumidores.'}),"\n",(0,o.jsx)(a.p,{children:"1.2.4- Produtor: Aplica\xe7\xe3o que envia mensagens para o t\xf3pico. As Mensagens s\xe3o replicadas entre brokers (para alta disponibilidade)."}),"\n",(0,o.jsx)(a.p,{children:"1.2.5- Consumidor: Aplica\xe7\xf5es quem leem as mensagens para o t\xf3pico."}),"\n",(0,o.jsx)(a.p,{children:"1.2.6- Grupo de consumidores: consumidores agrupados para dividir o processamento de um t\xf3pico."}),"\n",(0,o.jsx)(a.p,{children:"1.2.7 Cluster: \xe9 o agrupamento de m\xe1quinas onde cada uma possui um broker."}),"\n",(0,o.jsx)(a.p,{children:"1.3 Broker: servidor que recebe, armazena e entrega mensagens. (Ex.: Kafka, RabbitMQ). Pode haver m\xfaltiplos brokers em um cluster."}),"\n",(0,o.jsx)(a.p,{children:"1.4 Zookeeper: gerencia o estado do cluster (nas vers\xf5es antigas). Apartir da vers\xe3o Kafka 3 Kafka n\xe3o depende mais do Zookeeper como gerenciador de metadata nas vers\xf5es mais recentes. utilizado o modo KRaft."}),"\n",(0,o.jsxs)(a.ul,{children:["\n",(0,o.jsxs)(a.li,{children:["\n",(0,o.jsx)(a.p,{children:"At\xe9 o Kafka 2.8, o Zookeeper ainda era necess\xe1rio para produ\xe7\xe3o, mas j\xe1 estava dispon\xedvel um modo opcional sem ele, chamado de KRaft Mode (Kafka Raft Metadata mode)."}),"\n"]}),"\n",(0,o.jsxs)(a.li,{children:["\n",(0,o.jsx)(a.p,{children:"A partir do Kafka 3.0, o suporte ao KRaft se tornou est\xe1vel, mas o Zookeeper ainda podia ser usado."}),"\n"]}),"\n",(0,o.jsxs)(a.li,{children:["\n",(0,o.jsx)(a.p,{children:"A partir do Kafka 3.5 (e planejado para ser definitivo no Kafka 4.0, que deve sair em 2025), o uso do Zookeeper ser\xe1 oficialmente removido."}),"\n"]}),"\n"]}),"\n",(0,o.jsx)(a.h3,{id:"-2-vantagens-do-kafka",children:"\ud83d\udca1 2. Vantagens do Kafka"}),"\n",(0,o.jsx)(a.h4,{id:"21-capabilities",children:"2.1. capabilities"}),"\n",(0,o.jsx)(a.p,{children:"\u2714\ufe0fAlta performance (milh\xf5es de mensagens por segundo)."}),"\n",(0,o.jsx)(a.p,{children:"\u2714\ufe0fAlta escalabilidade (horizontal via parti\xe7\xf5es)."}),"\n",(0,o.jsx)(a.p,{children:"\u2714\ufe0fResili\xeancia e toler\xe2ncia a falhas (via replica\xe7\xe3o)."}),"\n",(0,o.jsx)(a.p,{children:"\u2714\ufe0fPersist\xeancia de mensagens (mensagens ficam armazenadas por tempo configurado ou tamanho do log)."}),"\n",(0,o.jsx)(a.p,{children:"\u2714\ufe0fEcossistema robusto (Kafka Connect, Kafka Streams, ksqlDB)."}),"\n",(0,o.jsx)(a.h4,{id:"22-casos-de-uso-comuns",children:"2.2 Casos de uso comuns:"}),"\n",(0,o.jsx)(a.p,{children:"\u2714\ufe0f Processamento de eventos (event-driven architecture)."}),"\n",(0,o.jsx)(a.p,{children:"\u2714\ufe0f Pipelines de dados (ETL em tempo real)."}),"\n",(0,o.jsx)(a.p,{children:"\u2714\ufe0f Log de atividades e monitoramento."}),"\n",(0,o.jsx)(a.p,{children:"\u2714\ufe0f Integra\xe7\xe3o de microsservi\xe7os."}),"\n",(0,o.jsx)(a.p,{children:"\u2714\ufe0f Streaming de dados."}),"\n",(0,o.jsx)(a.h3,{id:"-3-instala\xe7\xe3o-kafka-usando-docker",children:"\ud83d\udc33 3. Instala\xe7\xe3o Kafka usando Docker"}),"\n",(0,o.jsxs)(a.p,{children:["\u2714\ufe0f Crie um arquivo ",(0,o.jsx)(a.code,{children:"docker-compose.yml"}),":"]}),"\n",(0,o.jsx)(a.pre,{children:(0,o.jsx)(a.code,{children:'version: \'3\'\n\nservices:\n  zookeeper:\n    image: confluentinc/cp-zookeeper:latest\n    environment:\n      ZOOKEEPER_CLIENT_PORT: 2181\n    ports:\n      - "2181:2181"\n\n  kafka:\n    image: confluentinc/cp-kafka:latest\n    ports:\n      - "9092:9092"\n    environment:\n      KAFKA_BROKER_ID: 1\n      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181\n      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://localhost:9092\n      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1\n    depends_on:\n      - zookeeper\n'})}),"\n",(0,o.jsx)(a.p,{children:"\u2714\ufe0f Suba os servi\xe7os:"}),"\n",(0,o.jsx)(a.pre,{children:(0,o.jsx)(a.code,{children:"docker-compose up -d\n"})}),"\n",(0,o.jsx)(a.p,{children:"\u2714\ufe0f Verifique se subiu:"}),"\n",(0,o.jsx)(a.pre,{children:(0,o.jsx)(a.code,{children:"docker ps\n"})}),"\n",(0,o.jsx)(a.p,{children:"Deve aparecer o Kafka (cp-kafka) e o Zookeeper (cp-zookeeper)."}),"\n",(0,o.jsx)(a.h3,{id:"\ufe0f-4-produzir-e-consumir-mensagens-via-cli",children:"\ud83d\udee0\ufe0f 4. Produzir e consumir mensagens via CLI"}),"\n",(0,o.jsx)(a.p,{children:"\u2714\ufe0f Acesse o container do Kafka:"}),"\n",(0,o.jsx)(a.pre,{children:(0,o.jsx)(a.code,{children:"docker exec -it <nome_do_container_kafka> bash\n"})}),"\n",(0,o.jsx)(a.p,{children:"(Use docker ps para ver o nome do container.)"}),"\n",(0,o.jsx)(a.p,{children:"\u2714\ufe0f Criar um t\xf3pico:"}),"\n",(0,o.jsx)(a.pre,{children:(0,o.jsx)(a.code,{children:"kafka-topics --create \\\n  --topic meu-topico \\\n  --bootstrap-server localhost:9092 \\\n  --partitions 1 \\\n  --replication-factor 1\n"})}),"\n",(0,o.jsx)(a.p,{children:"\u2714\ufe0f Listar t\xf3picos:"}),"\n",(0,o.jsx)(a.pre,{children:(0,o.jsx)(a.code,{children:"kafka-topics --list --bootstrap-server localhost:9092\n"})}),"\n",(0,o.jsx)(a.p,{children:"\u2714\ufe0f Produzir mensagens:"}),"\n",(0,o.jsx)(a.pre,{children:(0,o.jsx)(a.code,{children:"kafka-console-producer \\\n  --topic meu-topico \\\n  --bootstrap-server localhost:9092\n\n"})}),"\n",(0,o.jsx)(a.p,{children:"Digite mensagens e pressione Enter para envi\xe1-las. Use Ctrl+C para sair."}),"\n",(0,o.jsx)(a.p,{children:"\u2714\ufe0f Consumir mensagens:"}),"\n",(0,o.jsx)(a.pre,{children:(0,o.jsx)(a.code,{children:"kafka-console-consumer \\\n  --topic meu-topico \\\n  --from-beginning \\\n  --bootstrap-server localhost:9092\n"})}),"\n",(0,o.jsx)(a.p,{children:"Ver\xe1 na tela as mensagens sendo lidas."}),"\n",(0,o.jsx)(a.p,{children:"\ud83d\udd25 Dicas Finais:\nKafka n\xe3o apaga mensagens automaticamente ap\xf3s o consumo (ao contr\xe1rio de RabbitMQ). Ele mant\xe9m baseado em tempo ou tamanho do log."}),"\n",(0,o.jsx)(a.p,{children:"Se quiser simular m\xfaltiplos consumidores, abra mais terminais rodando kafka-console-consumer."})]})}function p(e={}){const{wrapper:a}={...(0,r.R)(),...e.components};return a?(0,o.jsx)(a,{...e,children:(0,o.jsx)(l,{...e})}):l(e)}},8453:(e,a,n)=>{n.d(a,{R:()=>i,x:()=>d});var s=n(6540);const o={},r=s.createContext(o);function i(e){const a=s.useContext(r);return s.useMemo((function(){return"function"==typeof e?e(a):{...a,...e}}),[a,e])}function d(e){let a;return a=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:i(e.components),s.createElement(r.Provider,{value:a},e.children)}}}]);